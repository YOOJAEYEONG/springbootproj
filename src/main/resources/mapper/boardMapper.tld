<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.practice.springbootproj.board.BoardMapper">
    <select id="selectBoardTotalCount" parameterType="map" resultType="integer">
        SELECT COUNT (1) FROM BOARDS
            <where>
                AND BOARD_NAME = #{boardName}
                <if test='title != null and title != ""'>
                    AND TITLE LIKE '%' #{title} '%'
                </if>
                <if test='userName != null and userName != ""'>
                    AND USER_NAME LIKE '%' #{userName} '%'
                </if>
            </where>
    </select>

    <select id="selectBoardList" parameterType="map" resultType="com.practice.springbootproj.board.model.BoardListDTO">
        SELECT
            B.*
             ,(SELECT COUNT(1) FROM REPLY WHERE POST_GROUP_ID = B.POST_ID ) AS REPLY_CNT
        FROM
            (
                SELECT
                    ROW_NUMBER() OVER (PARTITION BY UPDATE_DATE ORDER BY POST_ID DESC) AS RNUM
                    ,POST_ID
                    ,USER_NAME
                    ,TITLE
                    ,BOARD_NAME
                    ,DATE_FORMAT(UPDATE_DATE,'%Y-%m-%d %H:%i:%S') AS UPDATE_DATE
                FROM BOARDS
                <where>
                    BOARD_NAME = #{boardName}
                    <if test='title != null and title != ""'>
                        AND TITLE LIKE '%' #{title} '%'
                    </if>
                    <if test='userName != null and userName != ""'>
                        AND USER_NAME LIKE '%' #{userName} '%'
                    </if>
                </where>
                ORDER BY POST_ID DESC
                 LIMIT ${startNum}, ${pageSize}
                /*(PAGENUM-1)*PAGESIZE, (PAGESIZE)*/
            ) B
    </select>

    <insert id="insertBoardPost" parameterType="com.practice.springbootproj.board.model.BoardInsertDTO">
        INSERT INTO BOARDS
            (
                 POST_ID
                ,USER_NAME
                ,TITLE
                ,PW
                ,CONTENTS
                ,BOARD_NAME
            )
            VALUES
            (
             NEXTVAL(BOARDS_SEQ)
             ,#{userName}
             ,#{title}
             ,#{pw}
             ,#{contents}
             ,#{boardName}
            )
    </insert>

    <select id="selectBoardPost" parameterType="map" resultType="com.practice.springbootproj.board.model.BoardDetailDTO">
        SELECT
            POST_ID
             ,USER_NAME
             ,TITLE
             ,CONTENTS
             ,BOARD_NAME
             ,DATE_FORMAT(UPDATE_DATE,'%Y-%m-%d %H:%i:%S') AS UPDATE_DATE
        FROM BOARDS WHERE POST_ID = #{postId};
    </select>

    <!-- 글 수정 -->
    <update id="updateBoardPost" parameterType="com.practice.springbootproj.board.model.BoardUpdateDTO">
      UPDATE BOARDS
      SET
         TITLE = #{title}
        ,USER_NAME = #{userName}
        ,PW = #{pw}
        ,CONTENTS = #{contents}
        ,UPDATE_DATE = UTC_TIMESTAMP -- TIME ZONE AT 'UTC'
      WHERE POST_ID = #{postId}
    </update>

    <delete id="deleteBoardPost" parameterType="map">
        DELETE FROM BOARDS WHERE POST_ID = #{postId} AND PW = #{pw}
    </delete>

  <!-- 댓글등록 -->
  <insert id="insertBoardReply" parameterType="com.practice.springbootproj.board.model.ReplyInsertDTO">
    INSERT INTO REPLY
    (
        POST_GROUP_ID
        ,TITLE
        ,PW
    )
    VALUES
    (
        #{postGroupId}
        ,#{title}
        ,#{pw}
    )
  </insert>
<!-- 댓글목록 조회 -->
  <select id="selectReplyPost" parameterType="map" resultType="com.practice.springbootproj.board.model.ReplyListVO">
    SELECT
        TITLE
        ,POST_ID
        ,DATE_FORMAT(CREATE_DATE,'%Y-%m-%d %H:%i:%S') AS CREATE_DATE
    FROM REPLY
    WHERE POST_GROUP_ID = #{postId}
    ORDER BY CREATE_DATE ASC
  </select>
  <!--댓글 수정-->
  <update id="updateBoardReply" parameterType="com.practice.springbootproj.board.model.ReplyUpdateDTO">
    UPDATE REPLY
    SET
        TITLE = #{title}
    WHERE POST_ID = #{postId} AND PW = #{pw}
  </update>
  <!-- 댓글 삭제-->
  <delete id="deleteBoardReply" parameterType="string">
    DELETE FROM REPLY WHERE POST_ID = #{postId} AND PW = #{pw}
  </delete>
    <!--
    BOARDS TABLE
    POST_ID	int unsigned NOT NULL PK
    USER_NAME	varchar(20) NOT NULL
    PW	varchar(20) NOT NULL
    TITLE	varchar(500) NOT NULL
    CONTENTS text NOT NULL
    BOARD_NAME	varchar(50) NOT NULL
    CREATE_DATE TIMESTAMP NOT NULL DEFAULT UTC_TIMESTAMP
    UPDATE_DATE	TIMESTAMP NOT NULL DEFAULT UTC_TIMESTAMP
    -->
  <!--
  CREATE TABLE `REPLY` (
	`POST_ID` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
	`POST_GROUP_ID` INT(10) UNSIGNED NOT NULL,
	`USER_NAME` VARCHAR(20) NULL COLLATE 'utf8_general_ci',
	`PW` VARCHAR(20) NOT NULL COLLATE 'utf8_general_ci',
	`TITLE` VARCHAR(1000) NOT NULL COLLATE 'utf8_general_ci',
	`CONTENTS` TEXT NULL COLLATE 'utf8mb4_unicode_ci',
	`CREATE_DATE` TIMESTAMP NOT NULL DEFAULT utc_timestamp(),
	`UPDATE_DATE` TIMESTAMP NOT NULL DEFAULT utc_timestamp(),
	PRIMARY KEY (`POST_ID`) USING BTREE,
	INDEX `FK_REPLY_BOARDS` (`POST_GROUP_ID`) USING BTREE,
	CONSTRAINT `FK_REPLY_BOARDS` FOREIGN KEY (`POST_GROUP_ID`) REFERENCES `IMDB`.`BOARDS` (`POST_ID`) ON UPDATE RESTRICT ON DELETE CASCADE
)
  -->
</mapper>
